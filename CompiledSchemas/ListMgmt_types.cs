



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=main~empty_live.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : ListMgmt_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace ListMgmt
{

/// <summary>
/// BondGuid
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class BondGuid : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required uint64 High
    private UInt64 m_High;

    // 1: Required uint64 Low
    private UInt64 m_Low;

    /// <summary>
    /// High
    /// </summary>
    public UInt64 High
    {
        get { return this.m_High; }
        set { this.m_High = value; }
    }

    /// <summary>
    /// Low
    /// </summary>
    public UInt64 Low
    {
        get { return this.m_Low; }
        set { this.m_Low = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata High_meta = new Metadata();
        public static readonly Metadata Low_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("BondGuid");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ListMgmt." + meta.name;


            // High
            High_meta.name = "High";
            High_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            High_meta.default_value.uint_value = 0;

            // Low
            Low_meta.name = "Low";
            Low_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            Low_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int High = 0;
        public const int Low = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_High = "High";
        public const String s_Low = "Low";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public BondGuid()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_High = 0;
        m_Low = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ListMgmt.BondGuid cloned = new global::ListMgmt.BondGuid();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ListMgmt.BondGuid that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: uint64 High
        that.High = this.High;
        // 1: uint64 Low
        that.Low = this.Low;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.High = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"High\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Low = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"Low\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.High:  // id=0
                    this.High = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.High, true);
                    break;
                case __ordinals.Low:  // id=1
                    this.Low = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.Low, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.High))
        {
            ok = false;
            missingFieldName = "High";
            missingFieldId = __ordinals.High;
        }
        if (ok && !seenFields.Get(__ordinals.Low))
        {
            ok = false;
            missingFieldName = "Low";
            missingFieldId = __ordinals.Low;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(BondGuid))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.High, Schema.High_meta);
            writer.WriteUInt64(m_High);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.Low, Schema.Low_meta);
            writer.WriteUInt64(m_Low);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="High";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Low";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        BondGuid that = obj as BondGuid;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(BondGuid other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(BondGuid that)
    {
        bool equals = true;
        
        equals = equals && ((this.High == that.High));
        equals = equals && ((this.Low == that.Low));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(BondGuid that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_High, this.High, separator);
        sb.AppendFormat(format, __internal.s_Low, this.Low, separator);
        
        return sb.ToString();
    } // ToString()

}; // class BondGuid

/// <summary>
/// PartitionedKeyFields
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PartitionedKeyFields : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required ListMgmt.BondGuid EnvironmentId
    private global::ListMgmt.BondGuid m_EnvironmentId;

    // 1: Required ListMgmt.BondGuid ListId
    private global::ListMgmt.BondGuid m_ListId;

    // 2: Required uint16 Revision
    private UInt16 m_Revision;

    /// <summary>
    /// EnvironmentId
    /// </summary>
    public global::ListMgmt.BondGuid EnvironmentId
    {
        get { return this.m_EnvironmentId; }
        set { this.m_EnvironmentId = value; }
    }

    /// <summary>
    /// ListId
    /// </summary>
    public global::ListMgmt.BondGuid ListId
    {
        get { return this.m_ListId; }
        set { this.m_ListId = value; }
    }

    /// <summary>
    /// Revision
    /// </summary>
    public UInt16 Revision
    {
        get { return this.m_Revision; }
        set { this.m_Revision = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata EnvironmentId_meta = new Metadata();
        public static readonly Metadata ListId_meta = new Metadata();
        public static readonly Metadata Revision_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PartitionedKeyFields");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ListMgmt." + meta.name;


            // EnvironmentId
            EnvironmentId_meta.name = "EnvironmentId";
            EnvironmentId_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // ListId
            ListId_meta.name = "ListId";
            ListId_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // Revision
            Revision_meta.name = "Revision";
            Revision_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            Revision_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int EnvironmentId = 0;
        public const int ListId = 1;
        public const int Revision = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_EnvironmentId = "EnvironmentId";
        public const String s_ListId = "ListId";
        public const String s_Revision = "Revision";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PartitionedKeyFields()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_EnvironmentId = new global::ListMgmt.BondGuid();
        m_ListId = new global::ListMgmt.BondGuid();
        m_Revision = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ListMgmt.PartitionedKeyFields cloned = new global::ListMgmt.PartitionedKeyFields();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ListMgmt.PartitionedKeyFields that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: ListMgmt.BondGuid EnvironmentId
        that.EnvironmentId = (this.EnvironmentId == null ? null : (global::ListMgmt.BondGuid)this.EnvironmentId.Clone());
        // 1: ListMgmt.BondGuid ListId
        that.ListId = (this.ListId == null ? null : (global::ListMgmt.BondGuid)this.ListId.Clone());
        // 2: uint16 Revision
        that.Revision = this.Revision;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.EnvironmentId.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"EnvironmentId\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ListId.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"ListId\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Revision = reader.ReadUInt16();
        }
        else
        {
            throw new BondException("Missing required field \"Revision\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.EnvironmentId:  // id=0
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.EnvironmentId.Read(reader);
                    seenRequiredFields.Set(__ordinals.EnvironmentId, true);
                    break;
                case __ordinals.ListId:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.ListId.Read(reader);
                    seenRequiredFields.Set(__ordinals.ListId, true);
                    break;
                case __ordinals.Revision:  // id=2
                    this.Revision = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, type);
                    seenRequiredFields.Set(__ordinals.Revision, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.EnvironmentId))
        {
            ok = false;
            missingFieldName = "EnvironmentId";
            missingFieldId = __ordinals.EnvironmentId;
        }
        if (ok && !seenFields.Get(__ordinals.ListId))
        {
            ok = false;
            missingFieldName = "ListId";
            missingFieldId = __ordinals.ListId;
        }
        if (ok && !seenFields.Get(__ordinals.Revision))
        {
            ok = false;
            missingFieldName = "Revision";
            missingFieldId = __ordinals.Revision;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PartitionedKeyFields))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.EnvironmentId, Schema.EnvironmentId_meta);
            m_EnvironmentId.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.ListId, Schema.ListId_meta);
            m_ListId.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.Revision, Schema.Revision_meta);
            writer.WriteUInt16(m_Revision);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="EnvironmentId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::ListMgmt.BondGuid.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ListId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::ListMgmt.BondGuid.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Revision";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PartitionedKeyFields that = obj as PartitionedKeyFields;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PartitionedKeyFields other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PartitionedKeyFields that)
    {
        bool equals = true;
        
        equals = equals && ((this.Revision == that.Revision));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PartitionedKeyFields that)
    {
        bool equals = true;
        
        equals = equals && (this.EnvironmentId == null ? true : this.EnvironmentId.MemberwiseCompare(that.EnvironmentId));
        equals = equals && (this.ListId == null ? true : this.ListId.MemberwiseCompare(that.ListId));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_EnvironmentId, this.EnvironmentId, separator);
        sb.AppendFormat(format, __internal.s_ListId, this.ListId, separator);
        sb.AppendFormat(format, __internal.s_Revision, this.Revision, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PartitionedKeyFields

// [SortableEncoding("1.0")]
/// <summary>
/// Key
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Key : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required ListMgmt.PartitionedKeyFields Ids
    private global::ListMgmt.PartitionedKeyFields m_Ids;

    // 1: Required uint8 RecType
    private Byte m_RecType;

    // 2: Required string ListKey
    private String m_ListKey;

    /// <summary>
    /// Ids
    /// </summary>
    public global::ListMgmt.PartitionedKeyFields Ids
    {
        get { return this.m_Ids; }
        set { this.m_Ids = value; }
    }

    /// <summary>
    /// RecType
    /// </summary>
    public Byte RecType
    {
        get { return this.m_RecType; }
        set { this.m_RecType = value; }
    }

    /// <summary>
    /// ListKey
    /// </summary>
    public String ListKey
    {
        get { return this.m_ListKey; }
        set { this.m_ListKey = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Ids_meta = new Metadata();
        public static readonly Metadata RecType_meta = new Metadata();
        public static readonly Metadata ListKey_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Key");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ListMgmt." + meta.name;

            meta.attributes["SortableEncoding"] = "1.0";

            // Ids
            Ids_meta.name = "Ids";
            Ids_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            Ids_meta.attributes["KeyMetadata"] = "PartitionKey";

            // RecType
            RecType_meta.name = "RecType";
            RecType_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            RecType_meta.default_value.uint_value = 0;

            // ListKey
            ListKey_meta.name = "ListKey";
            ListKey_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Ids = 0;
        public const int RecType = 1;
        public const int ListKey = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Ids = "Ids";
        public const String s_RecType = "RecType";
        public const String s_ListKey = "ListKey";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Key()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Ids = new global::ListMgmt.PartitionedKeyFields();
        m_RecType = 0;
        m_ListKey = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ListMgmt.Key cloned = new global::ListMgmt.Key();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ListMgmt.Key that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: ListMgmt.PartitionedKeyFields Ids
        that.Ids = (this.Ids == null ? null : (global::ListMgmt.PartitionedKeyFields)this.Ids.Clone());
        // 1: uint8 RecType
        that.RecType = this.RecType;
        // 2: string ListKey
        that.ListKey = this.ListKey;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Ids.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"Ids\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RecType = reader.ReadUInt8();
        }
        else
        {
            throw new BondException("Missing required field \"RecType\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ListKey = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"ListKey\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Ids:  // id=0
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Ids.Read(reader);
                    seenRequiredFields.Set(__ordinals.Ids, true);
                    break;
                case __ordinals.RecType:  // id=1
                    this.RecType = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, type);
                    seenRequiredFields.Set(__ordinals.RecType, true);
                    break;
                case __ordinals.ListKey:  // id=2
                    this.ListKey = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.ListKey, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Ids))
        {
            ok = false;
            missingFieldName = "Ids";
            missingFieldId = __ordinals.Ids;
        }
        if (ok && !seenFields.Get(__ordinals.RecType))
        {
            ok = false;
            missingFieldName = "RecType";
            missingFieldId = __ordinals.RecType;
        }
        if (ok && !seenFields.Get(__ordinals.ListKey))
        {
            ok = false;
            missingFieldName = "ListKey";
            missingFieldId = __ordinals.ListKey;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Key))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Ids, Schema.Ids_meta);
            m_Ids.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.RecType, Schema.RecType_meta);
            writer.WriteUInt8(m_RecType);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ListKey, Schema.ListKey_meta);
            writer.WriteString(m_ListKey);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);
        structDef.metadata.attributes["SortableEncoding"] = "1.0";

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="Ids";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::ListMgmt.PartitionedKeyFields.GetTypeDef(schema);
        field.metadata.attributes["KeyMetadata"] = "PartitionKey";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="RecType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ListKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Key that = obj as Key;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Key other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Key that)
    {
        bool equals = true;
        
        equals = equals && ((this.RecType == that.RecType));
        equals = equals && ((this.ListKey == null) == (that.ListKey == null));
        equals = equals && (this.ListKey == null ? true : (this.ListKey.Length == that.ListKey.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Key that)
    {
        bool equals = true;
        
        equals = equals && (this.Ids == null ? true : this.Ids.MemberwiseCompare(that.Ids));
        equals = equals && (this.ListKey == null ? true : this.ListKey == that.ListKey);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Ids, this.Ids, separator);
        sb.AppendFormat(format, __internal.s_RecType, this.RecType, separator);
        sb.AppendFormat(format, __internal.s_ListKey, this.ListKey, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Key

/// <summary>
/// Value
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Value : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required blob JsonData
    private BondBlob m_JsonData;

    /// <summary>
    /// JsonData
    /// </summary>
    public BondBlob JsonData
    {
        get { return this.m_JsonData; }
        set { this.m_JsonData = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata JsonData_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Value");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ListMgmt." + meta.name;


            // JsonData
            JsonData_meta.name = "JsonData";
            JsonData_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int JsonData = 0;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_JsonData = "JsonData";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Value()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_JsonData = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ListMgmt.Value cloned = new global::ListMgmt.Value();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ListMgmt.Value that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: blob JsonData
        that.JsonData = this.JsonData.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.JsonData = this.JsonData.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"JsonData\", id=0");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(1);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.JsonData:  // id=0
                    this.JsonData = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.JsonData, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.JsonData))
        {
            ok = false;
            missingFieldName = "JsonData";
            missingFieldId = __ordinals.JsonData;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Value))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.JsonData, Schema.JsonData_meta);
            UInt32 count1 = m_JsonData.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_JsonData.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="JsonData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Value that = obj as Value;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Value other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Value that)
    {
        bool equals = true;
        
        equals = equals && (this.JsonData.GetCount() == that.JsonData.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Value that)
    {
        bool equals = true;
        
        equals = equals && this.JsonData.CompareData(that.JsonData);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_JsonData, this.JsonData, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Value
} // namespace ListMgmt
