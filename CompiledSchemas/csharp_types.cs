



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.0
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : csharp_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace CustomList
{

/// <summary>
/// Guid
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Guid : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required uint64 ListIdHigh
    private UInt64 m_ListIdHigh;

    // 1: Required uint64 ListIdLow
    private UInt64 m_ListIdLow;

    /// <summary>
    /// ListIdHigh
    /// </summary>
    public UInt64 ListIdHigh
    {
        get { return this.m_ListIdHigh; }
        set { this.m_ListIdHigh = value; }
    }

    /// <summary>
    /// ListIdLow
    /// </summary>
    public UInt64 ListIdLow
    {
        get { return this.m_ListIdLow; }
        set { this.m_ListIdLow = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ListIdHigh_meta = new Metadata();
        public static readonly Metadata ListIdLow_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Guid");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "CustomList." + meta.name;


            // ListIdHigh
            ListIdHigh_meta.name = "ListIdHigh";
            ListIdHigh_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            ListIdHigh_meta.default_value.uint_value = 0;

            // ListIdLow
            ListIdLow_meta.name = "ListIdLow";
            ListIdLow_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            ListIdLow_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ListIdHigh = 0;
        public const int ListIdLow = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ListIdHigh = "ListIdHigh";
        public const String s_ListIdLow = "ListIdLow";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Guid()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ListIdHigh = 0;
        m_ListIdLow = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::CustomList.Guid cloned = new global::CustomList.Guid();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::CustomList.Guid that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: uint64 ListIdHigh
        that.ListIdHigh = this.ListIdHigh;
        // 1: uint64 ListIdLow
        that.ListIdLow = this.ListIdLow;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ListIdHigh = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"ListIdHigh\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ListIdLow = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"ListIdLow\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ListIdHigh:  // id=0
                    this.ListIdHigh = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.ListIdHigh, true);
                    break;
                case __ordinals.ListIdLow:  // id=1
                    this.ListIdLow = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.ListIdLow, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.ListIdHigh))
        {
            ok = false;
            missingFieldName = "ListIdHigh";
            missingFieldId = __ordinals.ListIdHigh;
        }
        if (ok && !seenFields.Get(__ordinals.ListIdLow))
        {
            ok = false;
            missingFieldName = "ListIdLow";
            missingFieldId = __ordinals.ListIdLow;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Guid))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.ListIdHigh, Schema.ListIdHigh_meta);
            writer.WriteUInt64(m_ListIdHigh);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.ListIdLow, Schema.ListIdLow_meta);
            writer.WriteUInt64(m_ListIdLow);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="ListIdHigh";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ListIdLow";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Guid that = obj as Guid;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Guid other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Guid that)
    {
        bool equals = true;
        
        equals = equals && ((this.ListIdHigh == that.ListIdHigh));
        equals = equals && ((this.ListIdLow == that.ListIdLow));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Guid that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ListIdHigh, this.ListIdHigh, separator);
        sb.AppendFormat(format, __internal.s_ListIdLow, this.ListIdLow, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Guid

// [SortableEncoding("1.0")]
/// <summary>
/// Key
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Key : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required CustomList.Guid ListId
    private global::CustomList.Guid m_ListId;

    // 2: Required string ListKey
    private String m_ListKey;

    /// <summary>
    /// ListId
    /// </summary>
    public global::CustomList.Guid ListId
    {
        get { return this.m_ListId; }
        set { this.m_ListId = value; }
    }

    /// <summary>
    /// ListKey
    /// </summary>
    public String ListKey
    {
        get { return this.m_ListKey; }
        set { this.m_ListKey = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ListId_meta = new Metadata();
        public static readonly Metadata ListKey_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Key");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "CustomList." + meta.name;

            meta.attributes["SortableEncoding"] = "1.0";

            // ListId
            ListId_meta.name = "ListId";
            ListId_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            ListId_meta.attributes["KeyMetadata"] = "PartitionKey";

            // ListKey
            ListKey_meta.name = "ListKey";
            ListKey_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ListId = 1;
        public const int ListKey = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ListId = "ListId";
        public const String s_ListKey = "ListKey";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Key()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ListId = new global::CustomList.Guid();
        m_ListKey = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::CustomList.Key cloned = new global::CustomList.Key();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::CustomList.Key that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: CustomList.Guid ListId
        that.ListId = (this.ListId == null ? null : (global::CustomList.Guid)this.ListId.Clone());
        // 2: string ListKey
        that.ListKey = this.ListKey;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ListId.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"ListId\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ListKey = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"ListKey\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ListId:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.ListId.Read(reader);
                    seenRequiredFields.Set(__ordinals.ListId, true);
                    break;
                case __ordinals.ListKey:  // id=2
                    this.ListKey = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.ListKey, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.ListId))
        {
            ok = false;
            missingFieldName = "ListId";
            missingFieldId = __ordinals.ListId;
        }
        if (ok && !seenFields.Get(__ordinals.ListKey))
        {
            ok = false;
            missingFieldName = "ListKey";
            missingFieldId = __ordinals.ListKey;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Key))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.ListId, Schema.ListId_meta);
            m_ListId.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ListKey, Schema.ListKey_meta);
            writer.WriteString(m_ListKey);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);
        structDef.metadata.attributes["SortableEncoding"] = "1.0";

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ListId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::CustomList.Guid.GetTypeDef(schema);
        field.metadata.attributes["KeyMetadata"] = "PartitionKey";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ListKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Key that = obj as Key;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Key other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Key that)
    {
        bool equals = true;
        
        equals = equals && ((this.ListKey == null) == (that.ListKey == null));
        equals = equals && (this.ListKey == null ? true : (this.ListKey.Length == that.ListKey.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Key that)
    {
        bool equals = true;
        
        equals = equals && (this.ListId == null ? true : this.ListId.MemberwiseCompare(that.ListId));
        equals = equals && (this.ListKey == null ? true : this.ListKey == that.ListKey);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ListId, this.ListId, separator);
        sb.AppendFormat(format, __internal.s_ListKey, this.ListKey, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Key

/// <summary>
/// Value
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Value : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Optional string Column1
    private String m_Column1;

    // 1: Optional string Column2
    private String m_Column2;

    // 2: Optional string Column3
    private String m_Column3;

    // 3: Optional string Column4
    private String m_Column4;

    // 4: Optional string Column5
    private String m_Column5;

    // 5: Optional string Column6
    private String m_Column6;

    // 6: Optional string Column7
    private String m_Column7;

    // 7: Optional string Column8
    private String m_Column8;

    // 8: Optional string Column9
    private String m_Column9;

    // 9: Optional string Column10
    private String m_Column10;

    /// <summary>
    /// Column1
    /// </summary>
    public String Column1
    {
        get { return this.m_Column1; }
        set { this.m_Column1 = value; }
    }

    /// <summary>
    /// Column2
    /// </summary>
    public String Column2
    {
        get { return this.m_Column2; }
        set { this.m_Column2 = value; }
    }

    /// <summary>
    /// Column3
    /// </summary>
    public String Column3
    {
        get { return this.m_Column3; }
        set { this.m_Column3 = value; }
    }

    /// <summary>
    /// Column4
    /// </summary>
    public String Column4
    {
        get { return this.m_Column4; }
        set { this.m_Column4 = value; }
    }

    /// <summary>
    /// Column5
    /// </summary>
    public String Column5
    {
        get { return this.m_Column5; }
        set { this.m_Column5 = value; }
    }

    /// <summary>
    /// Column6
    /// </summary>
    public String Column6
    {
        get { return this.m_Column6; }
        set { this.m_Column6 = value; }
    }

    /// <summary>
    /// Column7
    /// </summary>
    public String Column7
    {
        get { return this.m_Column7; }
        set { this.m_Column7 = value; }
    }

    /// <summary>
    /// Column8
    /// </summary>
    public String Column8
    {
        get { return this.m_Column8; }
        set { this.m_Column8 = value; }
    }

    /// <summary>
    /// Column9
    /// </summary>
    public String Column9
    {
        get { return this.m_Column9; }
        set { this.m_Column9 = value; }
    }

    /// <summary>
    /// Column10
    /// </summary>
    public String Column10
    {
        get { return this.m_Column10; }
        set { this.m_Column10 = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Column1_meta = new Metadata();
        public static readonly Metadata Column2_meta = new Metadata();
        public static readonly Metadata Column3_meta = new Metadata();
        public static readonly Metadata Column4_meta = new Metadata();
        public static readonly Metadata Column5_meta = new Metadata();
        public static readonly Metadata Column6_meta = new Metadata();
        public static readonly Metadata Column7_meta = new Metadata();
        public static readonly Metadata Column8_meta = new Metadata();
        public static readonly Metadata Column9_meta = new Metadata();
        public static readonly Metadata Column10_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Value");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "CustomList." + meta.name;


            // Column1
            Column1_meta.name = "Column1";
            Column1_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column2
            Column2_meta.name = "Column2";
            Column2_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column3
            Column3_meta.name = "Column3";
            Column3_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column4
            Column4_meta.name = "Column4";
            Column4_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column5
            Column5_meta.name = "Column5";
            Column5_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column6
            Column6_meta.name = "Column6";
            Column6_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column7
            Column7_meta.name = "Column7";
            Column7_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column8
            Column8_meta.name = "Column8";
            Column8_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column9
            Column9_meta.name = "Column9";
            Column9_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Column10
            Column10_meta.name = "Column10";
            Column10_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Column1 = 0;
        public const int Column2 = 1;
        public const int Column3 = 2;
        public const int Column4 = 3;
        public const int Column5 = 4;
        public const int Column6 = 5;
        public const int Column7 = 6;
        public const int Column8 = 7;
        public const int Column9 = 8;
        public const int Column10 = 9;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Column1 = "Column1";
        public const String s_Column2 = "Column2";
        public const String s_Column3 = "Column3";
        public const String s_Column4 = "Column4";
        public const String s_Column5 = "Column5";
        public const String s_Column6 = "Column6";
        public const String s_Column7 = "Column7";
        public const String s_Column8 = "Column8";
        public const String s_Column9 = "Column9";
        public const String s_Column10 = "Column10";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Value()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Column1 = string.Empty;
        m_Column2 = string.Empty;
        m_Column3 = string.Empty;
        m_Column4 = string.Empty;
        m_Column5 = string.Empty;
        m_Column6 = string.Empty;
        m_Column7 = string.Empty;
        m_Column8 = string.Empty;
        m_Column9 = string.Empty;
        m_Column10 = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::CustomList.Value cloned = new global::CustomList.Value();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::CustomList.Value that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: string Column1
        that.Column1 = this.Column1;
        // 1: string Column2
        that.Column2 = this.Column2;
        // 2: string Column3
        that.Column3 = this.Column3;
        // 3: string Column4
        that.Column4 = this.Column4;
        // 4: string Column5
        that.Column5 = this.Column5;
        // 5: string Column6
        that.Column6 = this.Column6;
        // 6: string Column7
        that.Column7 = this.Column7;
        // 7: string Column8
        that.Column8 = this.Column8;
        // 8: string Column9
        that.Column9 = this.Column9;
        // 9: string Column10
        that.Column10 = this.Column10;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column1 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column2 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column3 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column4 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column5 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column6 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column7 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column8 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column9 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Column10 = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Column1:  // id=0
                    this.Column1 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column2:  // id=1
                    this.Column2 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column3:  // id=2
                    this.Column3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column4:  // id=3
                    this.Column4 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column5:  // id=4
                    this.Column5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column6:  // id=5
                    this.Column6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column7:  // id=6
                    this.Column7 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column8:  // id=7
                    this.Column8 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column9:  // id=8
                    this.Column9 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Column10:  // id=9
                    this.Column10 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Value))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.Column1_meta.default_value.Equals(m_Column1)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column1, Schema.Column1_meta);
                writer.WriteString(m_Column1);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column1, Schema.Column1_meta);
        }

        if (writeAllFields || (!Schema.Column2_meta.default_value.Equals(m_Column2)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column2, Schema.Column2_meta);
                writer.WriteString(m_Column2);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column2, Schema.Column2_meta);
        }

        if (writeAllFields || (!Schema.Column3_meta.default_value.Equals(m_Column3)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column3, Schema.Column3_meta);
                writer.WriteString(m_Column3);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column3, Schema.Column3_meta);
        }

        if (writeAllFields || (!Schema.Column4_meta.default_value.Equals(m_Column4)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column4, Schema.Column4_meta);
                writer.WriteString(m_Column4);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column4, Schema.Column4_meta);
        }

        if (writeAllFields || (!Schema.Column5_meta.default_value.Equals(m_Column5)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column5, Schema.Column5_meta);
                writer.WriteString(m_Column5);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column5, Schema.Column5_meta);
        }

        if (writeAllFields || (!Schema.Column6_meta.default_value.Equals(m_Column6)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column6, Schema.Column6_meta);
                writer.WriteString(m_Column6);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column6, Schema.Column6_meta);
        }

        if (writeAllFields || (!Schema.Column7_meta.default_value.Equals(m_Column7)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column7, Schema.Column7_meta);
                writer.WriteString(m_Column7);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column7, Schema.Column7_meta);
        }

        if (writeAllFields || (!Schema.Column8_meta.default_value.Equals(m_Column8)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column8, Schema.Column8_meta);
                writer.WriteString(m_Column8);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column8, Schema.Column8_meta);
        }

        if (writeAllFields || (!Schema.Column9_meta.default_value.Equals(m_Column9)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column9, Schema.Column9_meta);
                writer.WriteString(m_Column9);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column9, Schema.Column9_meta);
        }

        if (writeAllFields || (!Schema.Column10_meta.default_value.Equals(m_Column10)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column10, Schema.Column10_meta);
                writer.WriteString(m_Column10);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Column10, Schema.Column10_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="Column1";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Column2";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Column3";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="Column4";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="Column5";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="Column6";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="Column7";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 7;
        field.metadata.name="Column8";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 8;
        field.metadata.name="Column9";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 9;
        field.metadata.name="Column10";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Value that = obj as Value;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Value other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Value that)
    {
        bool equals = true;
        
        equals = equals && ((this.Column1 == null) == (that.Column1 == null));
        equals = equals && (this.Column1 == null ? true : (this.Column1.Length == that.Column1.Length));
        equals = equals && ((this.Column2 == null) == (that.Column2 == null));
        equals = equals && (this.Column2 == null ? true : (this.Column2.Length == that.Column2.Length));
        equals = equals && ((this.Column3 == null) == (that.Column3 == null));
        equals = equals && (this.Column3 == null ? true : (this.Column3.Length == that.Column3.Length));
        equals = equals && ((this.Column4 == null) == (that.Column4 == null));
        equals = equals && (this.Column4 == null ? true : (this.Column4.Length == that.Column4.Length));
        equals = equals && ((this.Column5 == null) == (that.Column5 == null));
        equals = equals && (this.Column5 == null ? true : (this.Column5.Length == that.Column5.Length));
        equals = equals && ((this.Column6 == null) == (that.Column6 == null));
        equals = equals && (this.Column6 == null ? true : (this.Column6.Length == that.Column6.Length));
        equals = equals && ((this.Column7 == null) == (that.Column7 == null));
        equals = equals && (this.Column7 == null ? true : (this.Column7.Length == that.Column7.Length));
        equals = equals && ((this.Column8 == null) == (that.Column8 == null));
        equals = equals && (this.Column8 == null ? true : (this.Column8.Length == that.Column8.Length));
        equals = equals && ((this.Column9 == null) == (that.Column9 == null));
        equals = equals && (this.Column9 == null ? true : (this.Column9.Length == that.Column9.Length));
        equals = equals && ((this.Column10 == null) == (that.Column10 == null));
        equals = equals && (this.Column10 == null ? true : (this.Column10.Length == that.Column10.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Value that)
    {
        bool equals = true;
        
        equals = equals && (this.Column1 == null ? true : this.Column1 == that.Column1);
        equals = equals && (this.Column2 == null ? true : this.Column2 == that.Column2);
        equals = equals && (this.Column3 == null ? true : this.Column3 == that.Column3);
        equals = equals && (this.Column4 == null ? true : this.Column4 == that.Column4);
        equals = equals && (this.Column5 == null ? true : this.Column5 == that.Column5);
        equals = equals && (this.Column6 == null ? true : this.Column6 == that.Column6);
        equals = equals && (this.Column7 == null ? true : this.Column7 == that.Column7);
        equals = equals && (this.Column8 == null ? true : this.Column8 == that.Column8);
        equals = equals && (this.Column9 == null ? true : this.Column9 == that.Column9);
        equals = equals && (this.Column10 == null ? true : this.Column10 == that.Column10);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Column1, this.Column1, separator);
        sb.AppendFormat(format, __internal.s_Column2, this.Column2, separator);
        sb.AppendFormat(format, __internal.s_Column3, this.Column3, separator);
        sb.AppendFormat(format, __internal.s_Column4, this.Column4, separator);
        sb.AppendFormat(format, __internal.s_Column5, this.Column5, separator);
        sb.AppendFormat(format, __internal.s_Column6, this.Column6, separator);
        sb.AppendFormat(format, __internal.s_Column7, this.Column7, separator);
        sb.AppendFormat(format, __internal.s_Column8, this.Column8, separator);
        sb.AppendFormat(format, __internal.s_Column9, this.Column9, separator);
        sb.AppendFormat(format, __internal.s_Column10, this.Column10, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Value
} // namespace CustomList
